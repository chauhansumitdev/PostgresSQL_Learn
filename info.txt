* ACID principle- transaction princliples
set of properties that gurantee the reliability of transactions in the database system.
atomicity
consistency
isolation
durability
Atomicity - A transaction is to be treated as the single unit ie fundamental unit of work. It is indivisible. Either all the changes made by the transaction is committed to the database of none of it. If any part of the transaction fails the entire transaction is rolled back and the databse is uneffected and unchanged. No partial changes are allowed.
Consistency - This ensures that the transaction changes the database from one stable state to another no intermediate or partial changes are allowed if so the database is rolled back to the previous stable state.
Isolation - This ensures that the current execution of multiple transactions do not result in conflict  or interferce between them.
Durability - This ensures that the changes made by the transaction is persistent that is permanent and would stay the same in case of any physical failure ie permanently stored.

primary key - unique identifier for a record in the table - unique and never null

foreign key - column or set of coulums in a table that refer to the primary key of the another table

api design - rest and graphql
rest 
graphql
1 multiple endpoints
 single endpoint

 2 server decides the response structure
  client decides the response structure

  3 over/under fetching due to fixed structure
    minimised accordint to the requirements

4 muliple requests for differnet resources
  single request with nested queries



sql - structures query language 
domain specific langugae for relational databases for querying
sql components
dql - data query language - querying the db
ddl - data defiining language - defining the structure of the db
dml - data manipulating language - used for data storage and  manipulation
dcl - controlling the access to the data in the db



sql/nosql
sql - relational db, predefined schema, verticle scaling,
nosql - document db - storing the data in various formats like key: val pair ' schema less, horizontal scaling, 


database-
efficient data storage, manage, retrival, securityc, scalability

dbms - interface for managing the db


Normalization - the process of dividing the large table into smaller tables and definig the relationsips between them . reduces redudency(repetitiveness - copy) .there can be row level duplicacy and column level duplicacy. a normalized table is protected from insertion anomalies, deletion anomalies and deletion anomalies .this is achieved through normal forms-
1nf - first normal form - column contain atomic values - use of primary key
 using row order to comvey info is not permitted
mixing datatypes within the same column is not permitted
having a table without primary key is not permitted
repeating groups are not permitted

2nf - insertion deletion and updation anomaly
each non key(columns other than the primary key) must depend on the entire primary key
no partial dependency on the primary key is allowed

3nf - every non key attribute in a table should depend on the key the whole key and nothing but the key.

benefits of normailzation - minimizing the data duplicacy,update anomalies, facilitate querying.

Denormalization - the process of intentionally introducing the redudency into the db by combining the tables useful for read heavy applications


Write a SQL query to retrieve all columns from a table named "employees."
 select * from employees;


SELECT  - used to retrive data from the db table



| Aspect                              | WHERE Clause                                       | HAVING Clause                                        |
|-------------------------------------|----------------------------------------------------|------------------------------------------------------|
| **Used with Statements**             | SELECT, UPDATE, DELETE                              | SELECT (with GROUP BY)                                |
| **Filters Rows**                     | Before grouping and aggregation                     | After grouping and aggregation                       |
| **Works with Individual Rows**       | Yes                                                | No                                                   |
| **Works with Aggregated Values**     | No                                                 | Yes                                                  |
| **Example 1**                        | `SELECT column1 FROM table_name WHERE condition;` | N/A (Used for filtering before grouping)             |
| **Example 2**                        | `SELECT department, AVG(salary) FROM employees WHERE salary > 50000 GROUP BY department;` | `SELECT department, AVG(salary) FROM employees GROUP BY department HAVING AVG(salary) > 50000;` |
| **Use Case**                         | Filtering individual rows based on conditions      | Filtering grouped results based on aggregated values |



schema - structure of the table in a db
instance - the data in the table of the db at a particular instance of time.

olap - online analytical processing - deals with the historical records
oltp -online transaction processing - deals with tht current data

er diagram - entity - 
entity (row)- anything that has the differentiating preperty.
entity set

attributes - (columns) - defining and describing the properties of the entities.


generalisation/specialisation


rdbms
cardinality - no of rows in a table

problems in the rdbms- update anomalies
insertion anomalies
modification anomalies
deletion anomalies
 

redudency -> anomalies -> need to fix -> Normalization


functional dependency
like things that are true and are automatically undrstood.

attribute closure/set - >
set of attributes which can be functionally determined from F - denooted by F*

Armstrong axioms -
RAT
reflexivity - AB - B
augmentation - AB= CB
tranitivity - Y -Z then X - Z

key

Super key - Set of attributes using which we can identify eah tuple uniquely is called Super key
eg R(abcd)
then ab -> cd here as is the super key
closure of super key -> R(table)

Candidate key -
minimal set of attributes using which we can identify each tuple uniquely is called candidate key .

Primary key-
one of the candidates keys is selected by the db admin as a Primary means to indentify tuple is called primary key. cannot have null values and there can be exactly one primary key per table.
prime attribute - if it is a part of any of the candidate key.

foreign key - is a column or a group of columns in a relational db table that refers the primary key of the same table or some other table to represent relationsips.

Normalization
1nf -
atomic values
unique columns
primary key
eliminating duplicated

partial dependency - whne non prime attribut is dependent only on a part of the candidate key then it is called partial dependency.
r(abcd)
ab - d
a - c 

2nf -1nf+ should not contain partial dependency


Transisitive dependency -
r(abc)
a - B
b - c 
in this a is the primary key also the prime attribute and b and c are the non prime attr.
a functional dependency from non- prime attribute to non prime attribute is called transisive dependency.

3nf - 1nf+2nf+ should not contain the transitive dependency
a-b then b should be the prime attribute.

BCBF - boyce codd normal form
a should be super key .

Multivalued dependency-
Trivial/Non trivial
rohan - singer
rohan - dancer
shown with two arrows ->->

4nf-
it is in bcnf
there must not exist any non trivial multivalued dependency
each mvd is decomposed in separate table where it becomes trivial

summery - normalizaion = decomposition of the table
now a scenerio can arise = lossy/losless dependency preserving decomposition
when Denormalization is done the data is lost after joinig the dicomposed table tack to its original form

decomposition should be losless - menditory

the decomposition can be losless only when all of the attributes are covered by the decomposed tables and there is minimum of the one distinct common attribute between them
then the thing is that the common attribute should be the key(primary/candidate)

5nf
it can no longer decomposed and so if done there will defenetely lossy decomposition


INDEXING
improves the data retrival but increases space overhead

QUERY language
procedural query lang -  how users instruct system to performs a sequence of operations on the data base in order to compute the desired result.
- here the user provides bothe what data is retrieved and how to be retrieved eg relational algebra


non realational - the user describes the desired information without giving specific procedure for obtaining that information


relatioal algebra
operand - tables

the output is also a table - the operation can be between two tables or within one table only

fundamental operatirs
select
project
union
set differnce
cross product 
rename

derived
join
intersection
division
assignment



op
projection - column
selection - row

(works on cartesian products
)sql
ddl + dml + dcl(control) + dql (query) + vdl (view)
data defining - table size. col etc 

select
from 
where



join - 
inner join/ natural join - removes the common attribute and displays the result from two tables - lossy operation
left join - no data from the left table is lost  
right join
full join 
 

 Aggregate funcitons
AVG
min
max 
sum 
above all does not work on null - ignores them
count  - this can count null 



displaying 
order by


TRANSACTIONS
transactions
ACID
atomicity
consistency
isolation
durability

serialization, concurrency